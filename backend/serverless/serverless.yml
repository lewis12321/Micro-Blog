
service: blogs

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  createBlog:
    handler: create.handler
    events:
      - http:
          path: api/blogs
          method: post
  getBlogs:
    handler: get-all.handler
    events:
      - http:
          path: api/blogs
          method: get
  deleteBlog:
    handler: delete.handler
    events:
      - http:
          path: api/blogs
          method: delete
  getBlog:
    handler: get.handler
    events:
      - http:
          path: api/blogs/{id}
          method: get
          request: 
            parameters: 
              paths: 
                id: true

resources:
  Resources:
    BlogsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: _id
            AttributeType: S
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: _id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: id-index
            KeySchema: 
            - AttributeName: id
              KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}